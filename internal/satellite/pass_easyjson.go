// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package satellite

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite(in *jlexer.Lexer, out *Timing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hour":
			out.Hour = int(in.Int())
		case "Minute":
			out.Minute = int(in.Int())
		case "Second":
			out.Second = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite(out *jwriter.Writer, in Timing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hour\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Hour))
	}
	{
		const prefix string = ",\"Minute\":"
		out.RawString(prefix)
		out.Int(int(in.Minute))
	}
	{
		const prefix string = ",\"Second\":"
		out.RawString(prefix)
		out.Int(int(in.Second))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Timing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Timing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Timing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Timing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite(l, v)
}
func easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite1(in *jlexer.Lexer, out *Plan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Passes":
			if in.IsNull() {
				in.Skip()
				out.Passes = nil
			} else {
				in.Delim('[')
				if out.Passes == nil {
					if !in.IsDelim(']') {
						out.Passes = make([]Pass, 0, 0)
					} else {
						out.Passes = []Pass{}
					}
				} else {
					out.Passes = (out.Passes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Pass
					(v1).UnmarshalEasyJSON(in)
					out.Passes = append(out.Passes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite1(out *jwriter.Writer, in Plan) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Passes\":"
		out.RawString(prefix[1:])
		if in.Passes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Passes {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Plan) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Plan) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Plan) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Plan) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite1(l, v)
}
func easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite2(in *jlexer.Lexer, out *Pass) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FullPath":
			if in.IsNull() {
				in.Skip()
				out.FullPath = nil
			} else {
				in.Delim('[')
				if out.FullPath == nil {
					if !in.IsDelim(']') {
						out.FullPath = make([]LookAnglesAtTime, 0, 1)
					} else {
						out.FullPath = []LookAnglesAtTime{}
					}
				} else {
					out.FullPath = (out.FullPath)[:0]
				}
				for !in.IsDelim(']') {
					var v4 LookAnglesAtTime
					easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite3(in, &v4)
					out.FullPath = append(out.FullPath, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "FullPathDelta":
			out.FullPathDelta = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite2(out *jwriter.Writer, in Pass) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FullPath\":"
		out.RawString(prefix[1:])
		if in.FullPath == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.FullPath {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite3(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"FullPathDelta\":"
		out.RawString(prefix)
		out.Int64(int64(in.FullPathDelta))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pass) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pass) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pass) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pass) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite2(l, v)
}
func easyjsonF3b256a3DecodeGithubComPmcansecoGoSatTrackerInternalSatellite3(in *jlexer.Lexer, out *LookAnglesAtTime) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "az":
			out.AzimuthDegrees = float64(in.Float64())
		case "el":
			out.ElevationDegrees = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF3b256a3EncodeGithubComPmcansecoGoSatTrackerInternalSatellite3(out *jwriter.Writer, in LookAnglesAtTime) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"az\":"
		out.RawString(prefix)
		out.Float64(float64(in.AzimuthDegrees))
	}
	{
		const prefix string = ",\"el\":"
		out.RawString(prefix)
		out.Float64(float64(in.ElevationDegrees))
	}
	out.RawByte('}')
}
